---
title: "HW 1: Creating a Data Base"
author: "Sofia Ingersoll"
date: 2024-04-03
---
## Set up environment
```{r echo = TRUE, mesages = FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE) 

library(tidyverse)
library(here)
```

## Read in data

Snow_survey

Periodic records of snow cover remaining at the site

Column name	Definition
Site	Four-letter code of site at which data were collected                                  **dtype TEXT**
Year	Year in which data were collected                                      **dtype DATE**
Date	Date on which data were collected                                      **dtype DATE**
Plot	Name of study plot on which survey was conducted                                        **dtype TEXT**
Location	Name of dedicated snow-survey location, if applicable                               **dtype TEXT**
Snow_cover	Percent cover of snow, including slush                                                            **dtype REAL**
Water_cover	Percent cover of water                                                                            **dtype REAL**
Land_cover	Percent cover of exposed land                                                                     **dtype REAL**
Total_cover	Total sum (to check the above percents; should always sum to 100)                                 **dtype REAL**
Observer	Person who conducted the survey                                                   **dtype TEXT**
Notes	Any relevant comments on the survey                                                    **dtype TEXT**


Look at the data and come up with the best possible table descriptions. Assess all the ways it could be used:


    the data types of columns (pick from TEXT, REAL, INTEGER, DATE for this exercise)
    if the table has a primary key and what it might be
    any foreign key(s)
    whether NULL values are allowed
    uniqueness constraints, on individual columns and across columns
    other column value constraints, again, on individual columns and across columns

A new categorical table for conditions could be created and the environmental attributes could be binned according to ratios. Attributes listed as `dtype TEXT` above could be called using those tables ID. 

Note on constraints: NULL values would only make sense in the Notes and Location columns. Additionally, the Total_cover column must *always* sum to 100, this means Snow_cover, Water_cover, and Land_cover require a ratio that sums to 100 for each observation. For site, plot, location, and observer are a set of abbreviations.

**Entity with primary key "ID"** 
- Plot: Name of study plot on which survey was conducted (dtype TEXT).
*Foreign keys*
- site(s) and location(s) contained within boundaries, time stamp, environmental attributes (snow-, water-, land-, total cover)
- Color_band_code table column Color


**Entity with primary key "ID"** 
- Location: name of dedicated snow-survey location (dtype TEXT).
*Foreign keys*
- Location table

**Entity with primary key "ID"** 
- Site: site data were collected (dtype TEXT).
*Foreign keys*
- Site table column Code 


**Entity with primary key "ID"** 
- Observer: person who conducted the survey (dtype TEXT).
*Foreign keys*
- Table for Employment period(s): using observer ID, could access dates and sites they surveyed. 
- Personnel table


## Load data
```{r}
# load the data from data folder stored outside of repository
raw_data <- read_csv(here("..","data","ASDN_Snow_survey.csv"),
                     show_col_types = FALSE) %>% 
  # clean naming conventions
  janitor::clean_names()

# let's take a look at this data's structure 
str(raw_data)
```
```{r}
# load the data from data folder stored outside of repository
color_band_data <- read_csv(here("..","data","color_band_code.csv"),
                     show_col_types = FALSE) %>% 
  # clean naming conventions
  janitor::clean_names()



# load the data from data folder stored outside of repository
species_data <- read_csv(here("..","data","species.csv"),
                     show_col_types = FALSE) %>% 
  # clean naming conventions
  janitor::clean_names()



# load the data from data folder stored outside of repository
site_data <- read_csv(here("..","data","site.csv"),
                     show_col_types = FALSE) %>% 
  # clean naming conventions
  janitor::clean_names()



# load the data from data folder stored outside of repository
personnel_data <- read_csv(here("..","data","personnel.csv"),
                     show_col_types = FALSE) %>% 
  # clean naming conventions
  janitor::clean_names()
```


## Define table using SQL

It's good practice to do this before data collection to establish expectations early on. Things will likely need adjustment as the collection continues, there is SQL ot adjust this. By defining the data structure early on, we are also adding a level of quailty assurance to our data inputs.
 
```{SQL}
CREATE TABLE Species (
    Code TEXT PRIMARY KEY,
    Common_name TEXT UNIQUE NOT NULL,
    Scientific_name TEXT,
    Relevance TEXT
);

CREATE TABLE Site (
    Code TEXT PRIMARY KEY,
    Site_name TEXT UNIQUE NOT NULL,
    Location TEXT NOT NULL,
    Latitude REAL NOT NULL CHECK (Latitude BETWEEN -90 AND 90),
    Longitude REAL NOT NULL CHECK (Longitude BETWEEN -180 AND 180),
    "Total_Study_Plot_Area_(ha)" REAL NOT NULL
        CHECK ("Total_Study_Plot_Area_(ha)" > 0),
    UNIQUE (Latitude, Longitude)
);

CREATE TABLE Color_band_code (
    Code TEXT PRIMARY KEY,
    Color TEXT NOT NULL UNIQUE
);

CREATE TABLE Personnel (
    Abbreviation TEXT PRIMARY KEY,
    Name TEXT NOT NULL UNIQUE
);
```


### Directing SQL

This column here is a forward director for the code found in a column of another table.
Foregin key: first references column in table the table it's located in, and then the column it's located in another table
The table at the top is the og table.

```{SQL}
CREATE TABLE Camp_assignment (
    …,
    Site TEXT NOT NULL,         FOREIGN KEY (Site) REFERENCES Site (Code),
    
    Plot TEXT NOT NULL,         FOREIGN KEY(Plot) REFERENCES Color_band_code (Color),
    
    Observer TEXT NOT NULL,     FOREIGN KEY (Observer) REFERENCES Personnel (Abbreviation),
    
    Location TEXT NOT NULL,     FOREIGN KEY (Location) REFERENCES Site (Location),
    …,
    );
```

